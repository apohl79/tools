#!/usr/bin/perl
#
# (c) 2009 Andreas Pohl <apohl@pohlproductions.com>
#
# A MySQL/Sybase command line interface to replace isql.
#
# NOTE:
#
# You need the following packages:
#
# aptitude install libdbd-sybase-perl libterm-readline-gnu-perl libterm-readline-perl-perl libcurses-perl libxml-simple-perl
#
# The LD_LIBRARY_PATH needs to contain the sybase libs directory.

use strict;
use Getopt::Std;
use Term::ReadLine;
use Term::ANSIColor qw(:constants);
use Curses;
use DBI;
use Time::HiRes qw(gettimeofday);
use IO::Select;
use XML::Simple;

my $VERSION = "MiSQL v2.3 - MySQL/Sybase Commandline Tool\n\nCopyright (c) 2009 Andreas Pohl <apohl\@pohlproductions.com>";

#
# PRE WORK
#
$|++;
my $s = IO::Select->new();
$s->add(\*STDIN);

$Term::ReadLine::termcap_nowarn = 0;
initscr;
my $MAX_X = getmaxx;
endwin;

BEGIN {
  $ENV{SYBASE} = "/opt/sybase" unless exists $ENV{SYBASE};
  $ENV{LANG} = "en_US";
}

# command line params
my %opt;
getopt( "h:u:P:p:d:e:m:f:s:n", \%opt );
if (!exists($opt{h}) || !exists($opt{u}) || !exists($opt{p})) {
  usage();
}
my $host = $opt{h};
my $vhost = $opt{s};
my $port = $opt{P};
my $user = $opt{u};
my $pass = $opt{p};
my $mode = $opt{m};
my $format = $opt{f};
my $nohilight = exists($opt{n});
my $db_param = $opt{d};
my $exec_param = $opt{e};

# keywords for autocompletion
my @keywords;
chop and push @keywords, split while <DATA>;
my @databases;
my @tables;
my @fields;
my @sqlfuncs = ("count", "sum", "max", "avg", "abs", "acos", "asin", "atan2", "atan", "atan", "ceil", "ceiling", "conv", "cos", "cot", "crc32", "degrees", "exp", "floor", "ln", "log10", "log2","log", "mod", "oct", "pi", "pow", "power", "radians", "rand", "round", "sign", "sin", "sqrt", "tan", "truncate", "ascii", "bin", "bit_length", "char_length", "char",	"character_length", "concat_ws", "concat", "elt", "export_set", "field", "find_in_set",	"format", "hex", "insert", "instr", "lcase", "left", "length", "like", "load_file", "locate", "lower", "lpad", "ltrim", "make_set", "match", "mid", "notlike", "notregexp", "octet_length", "ord", "position", "quote", "regexp", "repeat", "replace", "reverse", "right", "rlike", "rpad", "rtrim", "soundex", "soundslike", "space", "strcmp", "substr", "substring_index", "substring", "trim", "ucase", "unhex", "upper");
my @bmfuncs = ("add", "exec", "delete", "show", "edit", "load");
my $keysref = undef;
my $bookmarkref;
my @bookmarknames;

# this is used by the event hook to replace the line buffer with the bm to load
my $tmp_load_bookmark;
# buffer for getc chars to detect arrow keys (3 chars)
my @getc_buf;
# avoid calling redisplay on left/right arrow keys
#my $skip_redisplay = 0;

# some execute flags
my $GET_TABLES = 0x100;
my $GET_DATABASES = 0x101;
my $GET_COLUMNS = 0x102;
my $USE_DB = 0x103;
my $SHOW = 0x104;
my $RECON = 0x105;
my $HELP = 0x106;
my $RAW_COMMAND = 0x107;
my $BOOKMARK = 0x108;

# define key char sequences
my $K_RIGHT = [27,91,67];
my $K_LEFT = [27,91,68];
my $K_END = [27,79,70];
my $K_HOME = [27,79,72];

# additional globals
my $db = "";
my $direct_exec_mode = 0;
my $prompt_format = '$mode:$vhost/$db> ';
my $historyfile = "/tmp/misql.$mode.$user.$host.$port.hist";
my $bookmarkfile = "$ENV{HOME}/.misql_bookmarks";

$vhost ||= $host;

my @stdinCmds;
if ($s->can_read(.5)) {
  while (<>) {
    push @stdinCmds, $_;
  }
}

if (length $exec_param || scalar(@stdinCmds) > 0) {
  $direct_exec_mode = 1;
}

my $dbh;
my $sth;
mconnect();

if (defined $db_param) {
  change_database("use $db_param");
} else {
  get_databases() if !$direct_exec_mode;
}

if (length $exec_param) {
  execute_cmd($exec_param);
  exit;
}

foreach (@stdinCmds) {
  execute_cmd($_);
}

if ($direct_exec_mode) {
  exit;
}

get_databases(1) if defined $db_param;

my $term = new Term::ReadLine 'misql';
$term->ornaments(0);
my $attr = $term->Attribs;
$attr->{attempted_completion_function} = \&complete;
$attr->{completion_function} = sub {};
$attr->{event_hook} = \&my_event_hook;
if (!$nohilight) {
  $attr->{getc_function} = \&my_getc_wrapper;
  #$attr->{redisplay_function} = \&my_redisplay_function;
}
my $prompt;
my $do_highlight = 0;
eval "\$prompt = \"$prompt_format\"";
my $OUT = $term->OUT || \*STDOUT;
init();

#
# MAIN LOOP
#
while ( defined ($_ = $term->readline($prompt)) ) {
  chomp;
  my $cmd = $_;
  warn $@ if $@;
  if ($cmd =~ /^quit/) {
    terminate();
  }
  #$term->addhistory($_) if /\S/;
  my $flags = get_execute_flags_by_command($cmd);
  if ($flags == $USE_DB) {
    change_database($cmd);
  } elsif ($flags == $SHOW) {
    handle_show_command($cmd);
  } elsif ($flags == $BOOKMARK) {
    handle_bookmark_command($cmd);
  } elsif ($flags == $HELP) {
    if ($mode eq "mysql") {
      help_mysql($cmd);
    } else {
      print "No help available in $mode mode.\n";
    }
  } elsif ($flags == $RAW_COMMAND) {
    if ($mode eq "mysql") {
      raw_mysql($cmd);
    } else {
      print "RAW commands are not available in $mode mode.\n";
    }
  } elsif ($flags == $RECON) {
    mconnect();
  } else {
    execute_cmd($cmd, 0);
  }
  eval "\$prompt = \"$prompt_format\"";
}

terminate();

#
# FUNCS
#
sub usage {
  print <<_EOF
$VERSION

Usage:

  $0 <options>
  $0 <options> < inputfile

Options:

  -m mode (sybase/mysql)
  -n No command hilighting
  -f format (color/plain/csv) (default: color)
  -h host
  -u user
  -p password
  -d database
  -e SQL

_EOF
  ;
  exit 1;
}

sub mconnect {
  if ($format ne "csv") {
    print "Connecting to $user\@$host".(defined $db? "/$db_param": "")." ($mode) ...\n";
  }
  if ($mode eq "sybase") {
    $dbh = DBI->connect("dbi:Sybase:$host", $user, $pass) or die $DBI::errstr;
  } elsif ($mode eq "mysql") {
    my $str = "DBI:mysql:host=$host";
    if (defined $port) {
      $str .= ":port=$port";
    }
    $dbh = DBI->connect($str, $user, $pass) or die $DBI::errstr;
    if (length $db > 0) {
      change_database("use $db");
    }
  } else {
    die "Mode $mode not supported!";
  }
}

sub init {
  $SIG{INT} = "terminate";
  # load history
  if (-e $historyfile) {
    print "Loading history...\n";
    $term->ReadHistory($historyfile);
  }
  if (-e $bookmarkfile) {
    print "Loading bookmarks...\n";
    $bookmarkref = XMLin($bookmarkfile);
    @bookmarknames = keys %{$bookmarkref};
  }
}

sub terminate {
  # save history
  print "\n";
  print "Saving history...\n";
  $term->WriteHistory($historyfile);
  print "bye\n";
  exit;
}

sub get_tables {
  print "Getting tables ... \n" if ($format ne "csv");
  @tables = ();
  if ($mode eq "sybase") {
    execute_cmd("sp_tables \@table_type = \"'TABLE'\"", 0, $GET_TABLES);
  } elsif ($mode eq "mysql") {
    execute_cmd("show tables", 0, $GET_TABLES);
  }
}

sub get_table_info {
  print "Updating table information " if ($format ne "csv");
  @fields = ();
  foreach my $tab (@tables) {
    if ($mode eq "sybase") {
      execute_cmd("sp_columns $tab", 1, $GET_COLUMNS);
    } elsif ($mode eq "mysql") {
      execute_cmd("desc $tab", 1, $GET_COLUMNS);
    }
    print "." if ($format ne "csv");
  }
  print "\n\n";
  @fields = sort keys %{{ map { $_ => 1 } @fields }};
}

sub get_databases {
  my $noOutput = shift;
  print "Getting databases ... \n" if ($format ne "csv");
  @databases = ();
  if ($mode eq "sybase") {
    execute_cmd("sp_databases", $noOutput, $GET_DATABASES);
  } elsif ($mode eq "mysql") {
    execute_cmd("show databases", $noOutput, $GET_DATABASES);
  }
}

sub change_database {
  my $cmd = shift;
  chomp $cmd;
  if ($cmd =~ /^use +([^ ]+) *$/) {
    my $newdb = $1;
    print "Changing database to $newdb ... \n" if ($format ne "csv");
    if (execute_cmd($cmd, 0, $USE_DB)) {
      $db = $newdb;
      get_tables() if !$direct_exec_mode;
      get_table_info() if !$direct_exec_mode;
    }
  }
}

sub handle_show_command {
  my $cmd = shift;
  if ($cmd =~ /^show +([^ ]+)/) {
    my $type = $1;
    if ($type eq "version") {
      print "$VERSION\n";
      return;
    } elsif ($type eq "all" || $type eq "databases") {
      print "Databases:\n";
      foreach my $db (@databases) {
	print "  $db\n";
      }
    } elsif ($type eq "all" || $type eq "tables") {
      print "Tables:\n";
      foreach my $t (@tables) {
	print "  $t\n";
      }
    } elsif ($type eq "all" || $type eq "columns") {
      print "Columns:\n";
      foreach my $c (@fields) {
	print "  $c\n";
      }
    } else {
      execute_cmd($cmd, 0);
    }
  } else {
    print "Usage: show {version|all|databases|tables|columns}\n";
  }
}

sub handle_bookmark_command {
  my $cmd = shift;
  chomp $cmd;
  $cmd =~ s/ +/ /g;
  my (undef, $bm, $name, $query) = split(/ /, $cmd, 4);
  if ($bm eq "add") {
    print "Saving bookmark '$name': $query\n";
    $bookmarkref->{$name} = $query;
    @bookmarknames = keys %{$bookmarkref};
    XMLout($bookmarkref, OutputFile => $bookmarkfile);
  } elsif ($bm eq "delete") {
    print "Deleting bookmark '$name'\n";
    delete $bookmarkref->{$name};
    @bookmarknames = keys %{$bookmarkref};
    XMLout($bookmarkref, OutputFile => $bookmarkfile);
  } elsif ($bm eq "load") {
    if (exists $bookmarkref->{$name}) {
      $tmp_load_bookmark = $bookmarkref->{$name};
    } else {
      print "No bookmark exists under that name.\n";
    }
  } elsif ($bm eq "exec") {
    if (exists $bookmarkref->{$name}) {
      print "Executing query: $bookmarkref->{$name}\n";
      execute_cmd($bookmarkref->{$name}, 0);
    } else {
      print "No bookmark exists under that name.\n";
    }
  } elsif ($bm eq "edit") {
    my $editor = $ENV{EDITOR};
    $editor ||= "emacs";
    if (exists $bookmarkref->{$name}) {
      open F, ">/tmp/bmtmp.sql";
      print F $bookmarkref->{$name};
      close F;
      print "Launching: $editor\n";
      system "$editor /tmp/bmtmp.sql";
      open F, "</tmp/bmtmp.sql";
      $bookmarkref->{$name} = <F>;
      close F;
      chomp $bookmarkref->{$name};
      XMLout($bookmarkref, OutputFile => $bookmarkfile);
      print "Done\n";
    } else {
      print "No bookmark exists under that name.\n";
    }
  } elsif ($bm eq "show") {
    foreach my $n (sort keys %{$bookmarkref}) {
      if (!defined $name || index($n, $name) > -1) {
	printf "%-25s %s\n", $n, highlight($bookmarkref->{$n});
      }
    }
  }
}

sub get_execute_flags_by_command {
  my $cmd = shift;
  if (index($cmd, "sp_tables ") == 0 || index($cmd, "show tables") == 0) {
    return $GET_TABLES;
  } elsif (index($cmd, "sp_databases ") == 0 || index($cmd, "show databases") == 0) {
    return $GET_DATABASES;
  } elsif (index($cmd, "sp_columns ") == 0 || index($cmd, "desc ") == 0) {
    return $GET_COLUMNS;
  } elsif (index($cmd, "use ") == 0) {
    return $USE_DB;
  } elsif (index($cmd, "show") == 0) {
    return $SHOW;
  } elsif (index($cmd, "reconnect") == 0) {
    return $RECON;
  } elsif (index($cmd, "help") == 0) {
    return $HELP;
  } elsif (index($cmd, "raw") == 0) {
    return $RAW_COMMAND;
  } elsif (index($cmd, "bm") == 0) {
    return $BOOKMARK;
  }
  return undef;
}

sub help_mysql {
  my $cmd = shift;
  my $helptext = `mysql -h$host -P$port -u$user -p$pass -e "$cmd"`;
  print $helptext;
}

sub raw_mysql {
  my $cmd = shift;
  $cmd = substr($cmd, 3); # removing "raw "
  system "mysql -h$host -P$port -u$user -p$pass -e \"$cmd\"";
  #print $helptext;
}

sub check_for_reconnect {
  my $errstr = shift;
  if ($errstr =~ /MySQL server has gone away/) {
    print "Connection lost!\n";
    mconnect();
  }
}

sub execute_cmd {
  my $cmd = shift;
  my $noOutput = shift;
  my $flags = shift;

  chomp $cmd;
  $cmd =~ s/[ ;]+$//;
  #print "cmd='$cmd'\n";
  if ($cmd eq " " || length $cmd == 0) {
    return;
  }

  my $tstart = gettimeofday;
  my $sth = $dbh->prepare($cmd);
  if ($DBI::errstr) {
    check_for_reconnect($DBI::errstr);
    $sth = $dbh->prepare($cmd);
    if ($DBI::errstr) {
      print "execute_cmd: prepare failed: ".$DBI::errstr."\n";
      return 0;
    }
  }
  $sth->execute();
  if ($DBI::errstr) {
    check_for_reconnect($DBI::errstr);
    $sth = $dbh->prepare($cmd);
    $sth->execute();
    if ($DBI::errstr) {
      print "execute_cmd: execute failed: ".$DBI::errstr."\n";
      return 0;
    }
  }
  my $telap = sprintf "%.4f", (gettimeofday-$tstart);
  if ($sth->{NUM_OF_FIELDS} > 0) {
    #print "NUM_OF_FIELDS = ".$sth->{NUM_OF_FIELDS}."\n";
    my $num_fields = $sth->{NUM_OF_FIELDS};
    my $names = $sth->{NAME};
    my $types = $sth->{TYPE};
    #print join(",", @$types)."\n";
    my @lens;
    my $i = 0;
    # initialize field length
    foreach my $f (@$names) {
      $lens[$i++] = length $f;
    }
    my @data;
    push @data, $names; # field names in the first row
    while (my @row = $sth->fetchrow_array) {
      push @data, \@row;
      if ($flags == $GET_DATABASES) {
	push @databases, $row[0];
      } elsif ($flags == $GET_TABLES) {
	if ($mode eq "sybase") {
	  push @tables, $row[2] if $row[3] eq "TABLE";
	} elsif ($mode eq "mysql") {
	  push @tables, $row[0];
	}
      } elsif ($flags == $GET_COLUMNS) {
	if ($mode eq "sybase") {
	  push @fields, $row[3];
	} elsif ($mode eq "mysql") {
	  push @fields, $row[0];
	}
      }
      $i = 0;
      foreach my $f (@row) {
	if (defined $f) {
	  my $len = length $f;
	  if ($len > $lens[$i]) {
	    $lens[$i] = $len;
	  }
	}
	$i++;
      }
    }
    if (!$noOutput) {
      if ($format eq "csv") {
	my $first = 1;
	foreach my $row (@data) {
	  my $i;
	  for ($i = 0; $i < $num_fields; $i++) {
	    my $isStr = ($first || $types->[$i] == 1 || $types->[$i] == -4 || $types->[$i] == 12 || $types->[$i] == 11);
	    my $isHex = 0; #($types->[$i] == -4);
	    if ($i != 0) {
	      print ",";
	    }
	    #print "0x" if $isHex;
	    print (defined $row->[$i]? $row->[$i]: "NULL");
	  }
	  print "\n";
	}
      } else {
	my $first = 1;
	foreach my $row (@data) {
	  my $i;
	  if ($first) {
	    for ($i = 0; $i < $num_fields; $i++) {
	      print BOLD.BLACK if !($format eq "plain");
	      print "+" if $i == 0;
	      print "-"x($lens[$i]+2);
	      print "+".RESET if !($format eq "plain");
	    }
	    print "\n";
	  }
	  for ($i = 0; $i < $num_fields; $i++) {
	    my $isStr = ($first || $types->[$i] == 1 || $types->[$i] == -4 || $types->[$i] == 12 || $types->[$i] == 11);
	    my $isHex = 0; #($types->[$i] == -4);
	    if ($i == 0) {
	      print BOLD.BLACK if !($format eq "plain");
	      print "|";
	      print RESET if !($format eq "plain");
	    }
	    print " ".BOLD if !($format eq "plain");
	    printf "%".($isStr? "-": "").($lens[$i])."s", (!$first && $isHex? "0x": "").(defined $row->[$i]? $row->[$i]: "NULL");
	    print BOLD.BLACK if !($format eq "plain");
	    print " |";
	    print RESET if !($format eq "plain");
	  }
	  print "\n";
	  if ($first) {
	    for ($i = 0; $i < $num_fields; $i++) {
	      print BOLD.BLACK if !($format eq "plain");
	      print "+" if $i == 0;
	      print "-"x($lens[$i]+2);
	      print "+".RESET if !($format eq "plain");
	    }
	    print "\n";
	    $first = 0;
	  }
	}
	for ($i = 0; $i < $num_fields; $i++) {
	  print BOLD.BLACK if !($format eq "plain");
	  print "+" if $i == 0;
	  print "-"x($lens[$i]+2);
	  print "+".RESET if !($format eq "plain");
	}
	print "\n(".(scalar(@data) - 1)." records received in $telap seconds)\n\n";
      }
    }
  }
  return 1;
}

#
# FUNC HOOKS
#
sub my_getc_wrapper {
  my $c = $term->getc($term->IN);
  push @getc_buf, $c;
  shift @getc_buf if $#getc_buf > 2;

  # filter keys
  if (!(int_compare_array(\@getc_buf, $K_LEFT) ||
	int_compare_array(\@getc_buf, $K_RIGHT) ||
	int_compare_array(\@getc_buf, $K_END) ||
	int_compare_array(\@getc_buf, $K_HOME)
       )) {
    $do_highlight = 1;
  }

  return $c;
}

#sub my_redisplay_function {
#  #open F, ">>/tmp/rdtmp";
#  #print F "skip_redisplay = $skip_redisplay\n";
#  #close F;
#
#  if (!$skip_redisplay) {
#    $term->redisplay;
#  } else {
#    $skip_redisplay = 0;
#  }
#}

sub my_event_hook {
  if (!$nohilight && $do_highlight) {
    highlight();
    $do_highlight = 0;
  }
  if (length $tmp_load_bookmark && !length $term->{line_buffer}) {
    $term->{line_buffer} = $tmp_load_bookmark;
    send_key(@$K_END);
    $tmp_load_bookmark = "";
    $do_highlight = 1;
  }
}

sub int_compare_array {
  my $arr1 = shift;
  my $arr2 = shift;
  return 0 if scalar(@$arr1) != scalar(@$arr2);
  for (my $i = 0; $i < scalar(@$arr1); $i++) {
    return 0 if $arr1->[$i] != $arr2->[$i];
  }
  return 1;
}

#
# SYNTAX HIGHLIGHTING
#
sub highlight {
  my $string = shift;
  my $use_line_buffer = 0;
  my $outstr = "";
  # if no string has been passed, we have to highlight the current line buffer and have a prompt.
  if (length($string) == 0) {
    $use_line_buffer = 1;
    $string = $term->{line_buffer};
    $outstr = $prompt;
  }
  my $len = length($outstr);
  my $first = 1;
  my $suffix = "";
  my @parts;
  #print "\n";
  foreach my $w (split / /, $string) {
    if ($first) {
      $first = 0;
    } else {
      #print " ' ' ";
      push @parts, " ";
    }
    while ($w =~ /^(.*?)([+-\/*()=<>"',;])(.*)$/) {
      #print " '$1' " if length $1;
      push @parts, $1 if length $1;
      #print " '$2' " if length $2;
      push @parts, $2 if length $2;
      $w = $3;
    }
    #print " '$w' ";
    push @parts, $w if length $w;
  }
  #print "\n";
  for (my $i = 0; $i < scalar(@parts); $i++) {
    my $w = $parts[$i];
    my $done = 0;
    my $isString = 0;
    if ($i > 0 && $i + 1 < scalar(@parts)) {
      if ($parts[$i - 1] eq "'") {
	my $j;
	for ($j = $i + 1; $j < scalar(@parts); $j++) {
	  if ($parts[$j] eq "'") {
	    $w = join("", @parts[$i..$j-1]);
	    $i = $j - 1;
	    $isString = 1;
	    last;
	  }
	}
      } elsif ($parts[$i - 1] eq '"') {
	my $j;
	for ($j = $i + 1; $j < scalar(@parts); $j++) {
	  if ($parts[$j] eq '"') {
	    $w = join("", @parts[$i..$j-1]);
	    $i = $j - 1;
	    $isString = 1;
	    last;
	  }
	}
      }
    }
    $len += length($w);
    if (length $suffix) {
      $outstr .= YELLOW.$suffix.RESET;
      $suffix = "";
    }
    if ($w eq "raw") {
      $outstr .= RED.$w.RESET;
      $done = 1;
    }
    next if $done;
    if ($isString) {
      $outstr .= MAGENTA.$w.RESET;
      $done = 1;
    }
    next if $done;
    foreach my $k (@keywords) {
      if ($w eq $k) {
	$outstr .= BOLD.BLUE.$w.RESET;
	$done = 1;
	last;
      }
    }
    next if $done;
    foreach my $k (@fields) {
      my $k2 = "$k,";
      my $k3 = ",$k";
      my $k4 = ",$k,";
      if ($w eq $k || $w eq $k2 || $w eq $k3 || $w eq $k4) {
	$outstr .= GREEN.$w.RESET;
	$done = 1;
	last;
      }
    }
    next if $done;
    foreach my $k (@databases) {
      if ($w eq $k) {
	$outstr .= BOLD.$w.RESET;
	$done = 1;
	last;
      }
    }
    next if $done;
    foreach my $k (@tables) {
      my $k2 = ",$k";
      if ($w eq $k || $w eq $k2) {
	$outstr .= BOLD.GREEN.$w.RESET;
	$done = 1;
	last;
      }
    }
    next if $done;
    my $w2 = $w;
    $w2 =~ s/\(.*/(/;
    foreach my $k (@sqlfuncs) {
      if ($w2 eq $k) {
	$outstr .= YELLOW.$w.RESET;
	$done = 1;
	last;
      }
    }
    next if $done;
    if ($w =~ /^\d+$/) {
      $outstr .= CYAN.$w.RESET;
      $done = 1;
    }
    next if $done;
    $outstr .= $w;
  }
  if (length $suffix) {
    $outstr .= YELLOW.$suffix.RESET;
  }
  $outstr .= RESET;

  if ($use_line_buffer) {
    my $rows = int($len / $MAX_X);
    system "tput sc";		# save cursor position
    print "\r";
    #for (my $i = 0; $i < $rows; $i++) {
    #  system "tput cuu1"; # move the cursor one row up
    #}
    if ($rows) {
      system "tput cuu $rows";
    }
    print $outstr;
    system "tput rc";		# restore cursor position
  } else {
    return $outstr;
  }
}

#
# AUTOCOMPLETION CODE
#
sub complete {
  my ($text, $line, $start, $end) = @_;

  if (length $text == 0) {
    return ();
  }

  my $index;
  my $str = substr($line, $start, $end - $start);
  my @ret;

  $index = rindex($line, "use ", $start - 1);
  if ($index > -1) {
    $keysref = \@databases;
    return $term->completion_matches($text, \&lookup);
  }

  $index = rindex($line, "sp_columns ", $start - 1);
  if ($index > -1) {
    $keysref = \@tables;
    return $term->completion_matches($text, \&lookup);
  }

  $index = rindex($line, "desc ", $start - 1);
  if ($index > -1) {
    $keysref = \@tables;
    return $term->completion_matches($text, \&lookup);
  }

  $index = rindex($line, "where ", $start - 1);
  if ($index > -1 && contains($text, @fields)) {
    $keysref = \@fields;
    return $term->completion_matches($text, \&lookup);
  }

  $index = rindex($line, "from ", $start - 1);
  if ($index > -1) {
    if ($str =~ /^([^ ,]+( as [^ ,]+)? ?(, ?[^ ,]+)*)?$/) {
      if (contains($text, @tables)) {
	$keysref = \@tables;
	return $term->completion_matches($text, \&lookup);
      }
    }
  }

  $index = rindex($line, "update ", $start - 1);
  if ($index > -1) {
    if (length $str == 0) {
      if (contains($text, @tables)) {
	$keysref = \@tables;
	return $term->completion_matches($text, \&lookup);
      }
    }
  }

  $index = rindex($line, "into ", $start - 1);
  if ($index > -1) {
    if (length $str == 0) {
      if (contains($text, @tables)) {
	$keysref = \@tables;
	return $term->completion_matches($text, \&lookup);
      }
    }
  }

  $index = rindex($line, "select ", $start - 1);
  if ($index > -1) {
    if ($str =~ /^([^ ,]+( as [^ ,]+)? ?( ?, ?[^ ,]+)*)?$/) {
      my $is_field = contains($text, @fields);
      my $is_func = contains($text, @sqlfuncs);
      if ($is_field && !$is_func) {
	$keysref = \@fields;
	return $term->completion_matches($text, \&lookup);
      }
      if ($is_func && !$is_field) {
	$keysref = \@sqlfuncs;
	@ret = $term->completion_matches($text, \&lookup);
	# add an opening bracket to sql functions
	if (scalar @ret == 1) {
	  $ret[0] .= "(";
	  # move the cursor back to be directly behind the bracket
	  send_key(@$K_LEFT);
	}
	return @ret;
      }
      if ($is_field && $is_func) {
	my @tmparr = (@fields, @sqlfuncs);
	$keysref = \@tmparr;
	return $term->completion_matches($text, \&lookup);
      }
    }
  }

  foreach my $bmfunc (@bmfuncs) {
    $index = rindex($line, "bm $bmfunc ", $start - 1);
    if ($index > -1) {
      if (contains($text, @bookmarknames)) {
	$keysref = \@bookmarknames;
	return $term->completion_matches($text, \&lookup);
      }
    }
  }

  $index = rindex($line, "bm ", $start - 1);
  if ($index > -1) {
    if (contains($text, @bmfuncs)) {
      $keysref = \@bmfuncs;
      return $term->completion_matches($text, \&lookup);
    }
  }

  $keysref = \@keywords;
  return $term->completion_matches($text, \&lookup);
}

sub contains {
  my $val = shift;
  foreach (@_) {
    if (index($_, $val) > -1) {
      return 1;
    }
  }
  return 0;
}

my $g_i;
sub lookup {
  my ($text, $state) = @_;
  return unless $keysref;
  return unless $text;
  if($state) {
    $g_i++;
  } else { # first call
    $g_i = 0;
  }
  for (; $g_i <= scalar(@$keysref); $g_i++) {
    if ($keysref->[$g_i] =~ /^\Q$text/) {
      return $keysref->[$g_i];
    }
  }
  return ();
}

sub debug {
  my $msg = shift;
  open F, ">>/tmp/misql.dbg";
  print F $msg."\n";
  close F;
}

#
# TERM HELPERS
#
sub send_key {
  foreach my $c (@_) {
    $term->stuff_char($c);
  }
}

__DATA__
select create drop insert from where into rowcount set update use quit alter table commit
begin shutdown while group by as is not having case when desc describe explain call
delete do handler load data infile replace truncate dump tran with if ifnull nullif

show databases tables columns all reconnect function view index procedure trigger
duplicate key processlist full help and or distinct limit insert into between in bm add
load exec edit

sp_activeroles
sp_add_qpgroup
sp_add_resource_limit
sp_add_time_range
sp_addalias
sp_addauditrecord
sp_addaudittable
sp_addengine
sp_addexeclass
sp_addextendedproc
sp_addexternlogin
sp_addgroup
sp_addlanguage
sp_addlogin
sp_addmessage
sp_addobjectdef
sp_addremotelogin
sp_addsegment
sp_addserver
sp_addthreshold
sp_addtype
sp_addumpdevice
sp_adduser
sp_altermessage
sp_audit
sp_autoconnect
sp_autoformat
sp_bindcache
sp_bindefault
sp_bindexeclass
sp_bindmsg
sp_bindrule
sp_cacheconfig
sp_cachestrategy
sp_changedbowner
sp_changegroup
sp_checknames
sp_checkreswords
sp_checksource
sp_chgattribute
sp_clearpsexe
sp_clearstats
sp_client_addr
sp_cmp_all_qplans
sp_cmp_qplans
sp_commonkey
sp_companion
sp_configure
sp_copy_all_qplans
sp_copy_qplan
sp_countmetadata
sp_cursorinfo
sp_dbextend
sp_dboption
sp_dbrecovery_order
sp_dbremap
sp_defaultloc
sp_depends
sp_deviceattr
sp_diskdefault
sp_displayaudit
sp_displaylevel
sp_displaylogin
sp_displayroles
sp_dropalias
sp_drop_all_qplans
sp_drop_qpgroup
sp_drop_qplan
sp_drop_resource_limit
sp_drop_time_range
sp_dropdevice
sp_dropengine
sp_dropexeclass
sp_dropextendedproc
sp_dropexternlogin
sp_dropglockpromote
sp_dropgroup
sp_dropkey
sp_droplanguage
sp_droplogin
sp_dropmessage
sp_dropobjectdef
sp_dropremotelogin
sp_droprowlockpromote
sp_dropsegment
sp_dropserver
sp_dropthreshold
sp_droptype
sp_dropuser
sp_dumpoptimize
sp_engine
sp_estspace
sp_export_qpgroup
sp_extendsegment
sp_extengine
sp_familylock
sp_find_qplan
sp_fixindex
sp_flushstats
sp_forceonline_db
sp_forceonline_object
sp_forceonline_page
sp_foreignkey
sp_freedll
sp_getmessage
sp_grantlogin
sp_ha_admin
sp_help
sp_help_resource_limit
sp_help_qpgroup
sp_help_qplan
sp_helpartition
sp_helpcache
sp_helpcomputedcolumn
sp_helpconfig
sp_helpconstraint
sp_helpdb
sp_helpdevice
sp_helpextendedproc
sp_helpexternlogin
sp_helpgroup
sp_helpindex
sp_helpjava
sp_helpjoins
sp_helpkey
sp_helplanguage
sp_helplog
sp_helpobjectdef
sp_helpremotelogin
sp_helprotect
sp_helpsegment
sp_helpserver
sp_helpsort
sp_helptext
sp_helpthreshold
sp_helpuser
sp_hidetext
sp_import_qpgroup
sp_indsuspect
sp_ldapadmin
sp_listener
sp_listsuspect_db
sp_listsuspect_object
sp_listsuspect_page
sp_lmconfig
sp_lock
sp_locklogin
sp_logdevice
sp_loginconfig
sp_logininfo
sp_logiosize
sp_maplogin
sp_metrics
sp_modify_resource_limit
sp_modify_time_range
sp_modifylogin
sp_modifystats
sp_modifythreshold
sp_monitor
sp_monitorconfig
sp_object_stats
sp_passthru
sp_password
sp_placeobject
sp_plan_dbccdb
sp_poolconfig
sp_post_xpload
sp_primarykey
sp_processmail
sp_procxmode
sp_recompile
sp_remap
sp_remoteoption
sp_remotesql
sp_rename
sp_rename_qpgroup
sp_renamedb
sp_reportstats
sp_revokelogin
sp_role
sp_sendmsg
sp_serveroption
sp_set_qplan
sp_setlangalias
sp_setpglockpromote
sp_setpsexe
sp_setrowlockpromote
sp_setsuspect_granularity
sp_setsuspect_threshold
sp_showcontrolinfo
sp_showexeclass
sp_showplan
sp_showpsexe
sp_spaceused
sp_ssladmin
sp_syntax
sp_sysmon
sp_tempdb
sp_thresholdaction
sp_transactions
sp_unbindcache
sp_unbindcache_all
sp_unbindefault
sp_unbindexeclass
sp_unbindmsg
sp_unbindrule
sp_version
sp_volchanged
sp_who
sp_column_privileges
sp_columns
sp_databases
sp_datatype_info
sp_fkeys
sp_pkeys
sp_server_info
sp_special_columns
sp_sproc_columns
sp_statistics
sp_stored_procedures
sp_table_privileges
sp_tables

abort switch
activate subscription
add partition
admin config
admin disk_space
admin echo
admin get_generation
admin health
admin log_name
admin logical_status
admin pid
admin quiesce_check
admin quiesce_force_rsi
admin rssd_name
admin security_property
admin security_setting
admin set_log_name
admin show_connections
admin show_function_classes
admin show_route_versions
admin show_site_version
admin sqm_readers
admin stats
admin stats, backlog
admin stats, cancel
admin stats, {md | mem | mem_in_use}
admin stats, reset
admin stats, status
admin stats, {tps | cps | bps}
admin time
admin translate
admin version
admin who
admin who_is_down
admin who_is_up
