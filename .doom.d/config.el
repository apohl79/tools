;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Andreas Pohl"
      user-mail-address "pohl@e47.org")

;(setq debug-on-error t)

(load! "+functions")
(load! "+bindings")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;      doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;(setq doom-theme 'doom-one)
(setq doom-theme 'doom-city-lights)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Disable the quit question
(setq confirm-kill-emacs nil)

;; make sure we get asked to accept non-safe local variables from .dir-locals.el files
;(setq enable-local-variables t)
(setq enable-local-variables :all)


(setq lsp-disabled-clients '(ccls))
(setq lsp-idle-delay 0.9)
(setq lsp-restart 'auto-restart)
(setq lsp-ui-doc-enable nil)
;(setq lsp-log-io t)
;(setq lsp-file-watch-threshold nil)
;(setq lsp-enable-file-watchers nil)

;; no flycheck for now
;(setq lsp-diagnostics-provider :none)

;; Use xcode's clangd
;; Note for next time:
;; - .dir-locals.el which set the flycheck-clang-include-path should not be needed
;; - clangd uses the compile_commands.json file generated by cmake and the conf step
;; - header files without a cpp:
;;      - clangd derives the build command from the first cpp in the compile_commands.json
;;        (for AG that is App.cpp)
;;        -> make sure that this command contains all needed include dirs
;(setq lsp-clients-clangd-executable "/Library/Developer/CommandLineTools/usr/bin/clangd")

(setq lsp-clients-clangd-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clangd")
(setq lsp-clients-clangd-args '("-log=error" "--background-index" "--clang-tidy" "--completion-style=bundled" "--header-insertion=never" "--recovery-ast" "--pretty"))

(setq lsp-pylsp-plugins-flake8-ignore "E128,E261,E265,E302,E401,E501,E713,E741")
(setq lsp-pylsp-plugins-pydocstyle-enabled nil)
(setq lsp-pylsp-plugins-mccabe-threshold 40)

(set-file-template! "\\.hpp$" :trigger "__hpp" :mode 'c++-mode)
(set-file-template! "\\.cpp$" :trigger "__cpp" :mode 'c++-mode)
(set-file-template! "syncdna.*\\.hpp$" :trigger "sdna_hpp" :mode 'c++-mode)
(set-file-template! "syncdna.*\\.cpp$" :trigger "sdna_cpp" :mode 'c++-mode)
(set-file-template! "AudioGridder.*\\.hpp$" :trigger "ag_hpp" :mode 'c++-mode)
(set-file-template! "AudioGridder.*\\.cpp$" :trigger "ag_cpp" :mode 'c++-mode)

;; exclude JUCE
;(after! lsp
;  (push "/Users/pohlandr/audio/JUCE6" lsp-file-watch-ignored))

(add-hook 'c++-mode-hook
          (lambda ()
            ;(setq flycheck-clang-include-path
            ;               (list
            ;                (expand-file-name "~/audio/AudioGridder/build-dev/Plugin/AudioGridderFx_artefacts/JuceLibraryCode")
            ;                (expand-file-name "~/audio/AudioGridder/build-dev/Server/AudioGridderServer_artefacts/JuceLibraryCode")
            ;                (expand-file-name "~/audio/AudioGridder/Common/Source")
            ;                (expand-file-name "~/audio/AudioGridder/JUCE/modules")
            ;                (expand-file-name "~/audio/ag-deps-macos-x86_64/include")
            ;                ))
            (setq flycheck-clang-language-standard "c++17")
            ))

(after! company
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 1))

;(add-hook 'lsp-managed-mode-hook
;          (lambda ()
;            (setq-local company-backends '((company-capf :with company-yasnippet)))))

;; Automatically use the right modes by file extension
(setq auto-mode-alist
      (append '(("\\.app$"                  . c++-mode)
                ("\\.bat$"                  . rexx-mode)        ; to edit batchfiles
                ("\\.bib$"                  . bibtex-mode)      ;
                ("\\.btm$"                  . rexx-mode)
                ("\\.C$"                    . c++-mode)
                ("\\.i$"                    . c++-mode)         ; SWIG: use c++-mode
                ("\\.cc$"                   . c++-mode)
                ("\\.cpp$"                  . c++-mode)
                ("\\.H$"                    . c++-mode)
                ("\\.h$"                    . c++-mode)
                ("\\.hi$"                   . c-mode)
                ("\\.hpp$"                  . c++-mode)
                ("\\.idl$"                  . c++-mode)
                ("\\.c$"                    . c-mode)           ; to edit C code
                ("\\.sqc$"                  . c-mode)           ; NON-Preprocessed C with DB/2 SQL
                ("\\.rc$"                   . c-mode)           ; Files from rc are also smth like c
                ("\\.rci$"                  . c-mode)           ; Files from rc are also smth like c
                ("\\.rcx$"                  . c-mode)           ; Files from rc are also smth like c
                ("\\.cmd$"                  . rexx-mode)        ; to edit REXX-Skripte
                ("\\.c?ps$"                 . postscript-mode)  ; Fuer postscript-files
                ("\\.tex$"                  . latex-mode)       ; tbd
                ("\\.sm$"                   . latex-mode)       ;
                ("\\.sty$"                  . latex-mode)       ;
                ("\\.mak$"                  . makefile-mode)
                ("makefile$"                . makefile-mode)
                ("\\.java$"                 . java-mode)
                ("\\.jav$"                  . java-mode)
                ("\\.py$"                   . python-mode)
                ("\\.xh$"                   . c++-mode)
                ("\\.xih$"                  . c++-mode)
                ("\\.in$"                   . m4-mode)
                ("\\.\\([pP][Llm]\\|al\\)$" . cperl-mode)
                ("\\.pod$"                  . cperl-mode)
                ("\\.puml$"                 . plantuml-mode)
                ("\\.ino$"                  . c++-mode)
                ) auto-mode-alist))

;; Deactivating, as projectile has this feature too...
;; Switch between header and implementation
;(defvar my-cpp-other-file-alist
;  '(("\\.cpp\\'" (".h" ".hpp" ".ipp"))
;    ("\\.ipp\\'" (".hpp" ".cpp"))
;    ("\\.hpp\\'" (".ipp" ".cpp"))
;    ("\\.cxx\\'" (".hxx" ".ixx"))
;    ("\\.ixx\\'" (".cxx" ".hxx"))
;    ("\\.hxx\\'" (".ixx" ".cxx"))
;    ("\\.cc\\'" (".h" ".hh"))
;    ("\\.c\\'" (".h"))
;    ("\\.h\\'" (".cpp" ".cc" ".cxx" ".c"))))
;
;(setq-default ff-other-file-alist 'my-cpp-other-file-alist)

;; "ctrl - left click" buffer menu: increase number of items shown
;; set max length of this list. default 20. see next.
(setq mouse-buffer-menu-maxlen 30)
;; set # buffer in a mode before grouping begins. takes precedence over previous
;; set to 1 to always group by mode. default 4
(setq mouse-buffer-menu-mode-mult 1)

;; enable LLDB support
(use-package! realgud-lldb)

;; compilation buffer: autosave and stop at the first error and skip warnings
(setq compilation-scroll-output 'next-error)
(setq compilation-skip-threshold 2)
;; do not save before compilation
;(setq compilation-save-buffers-predicate 'ignore)

(set-default 'truncate-lines nil)

;(load! "workgroups")
;(setq wg-morph-on nil)

(custom-set-variables
 '(display-buffer-base-action
   '((display-buffer-dedicated-window display-buffer--maybe-same-window display-buffer-reuse-window)))
 '(window-min-height 8)
 '(window-min-width 40))

(custom-set-variables
 '(display-buffer-alist
   '((".*"
      (display-buffer-reuse-major-mode-window display-buffer-dedicated-window)
      ))))

; some tab customization: don't kill my buffers view by double clicking a tab
(after! centaur-tabs
  (centaur-tabs-enable-buffer-alphabetical-reordering)
  (setq centaur-tabs-adjust-buffer-order t)
  (setq centaur-tabs-set-bar 'over)
  (define-key centaur-tabs-mode-map (vector centaur-tabs-display-line 'double-mouse-1) nil))

; use an alternative tabs package from the one doom provides...
(load! "awesome-tab")
;(use-package! awesome-tab
;  :config
;  (awesome-tab-mode t)
;  (setq awesome-tab-display-sticky-function-name t)
;  (setq awesome-tab-height 100))

;; Auto-hide compilation biffer
(use-package! bury-successful-compilation)
;(use-package! bury-successful-compilation
;  :ensure t
;  :bind ("C-c C-m" . recompile))
