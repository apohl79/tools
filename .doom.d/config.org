#+title: Doom Emacs Configuration

#+STARTUP: overview

Press =C-c C-v t= to update =config.el= followed by ~doom/reload~ or ~doom/restart~.

* General

#+begin_src emacs-lisp :tangle yes
(load! "+functions")

(setq user-full-name "Andreas Pohl"
      user-mail-address "pohl@e47.org")

;; Maximize emacs w/o setting a frame property to keep normal macOS window management working
(add-hook 'doom-init-ui-hook
  (lambda ()
    (set-frame-position (selected-frame) 0 0)
    (set-frame-size (selected-frame) (- (display-pixel-width) 16) (display-pixel-height) t)))

;; Restore last session automatically
(add-hook! 'window-setup-hook #'my-quickload-session)
#+end_src

** General behavior

#+begin_src emacs-lisp :tangle yes
;; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Disable the quit question
(setq confirm-kill-emacs nil)

;; Make sure we get asked to accept non-safe local variables from .dir-locals.el files
(setq enable-local-variables :all)

;; "ctrl - left click" buffer menu: increase number of items shown.
;; Set max length of this list. default 20. see next.
(setq mouse-buffer-menu-maxlen 30)

;; set # buffer in a mode before grouping begins. takes precedence over previous
;; set to 1 to always group by mode. default 4
(setq mouse-buffer-menu-mode-mult 1)

;; Hide commands in M-x which do not apply to the current mode.
(setq read-extended-command-predicate #'command-completion-default-include-p)

;; Do not truncate lines but wrap them into the next line
(set-default 'truncate-lines nil)
#+end_src

** Org

#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"
      org-support-shift-select t
      org-replace-disputed-keys t
      org-startup-indented t
      org-pretty-entities t
      org-use-sub-superscripts "{}"
      org-hide-emphasis-markers t
      org-startup-with-inline-images t
      org-image-actual-width '(300))
#+end_src

** Spellchecker

#+begin_src emacs-lisp :tangle yes
(use-package! jinx
  :hook ((org-mode . jinx-mode)
         (prog-mode . jinx-mode))
  :config
  (setq jinx-languages "en_US de_DE_frami"
        jinx-delay 1.0)
  ; no spell checking in strings
  (add-to-list 'jinx-exclude-faces '(prog-mode font-lock-string-face)))

(after! vertico-multiform ;; if using vertico
  (add-to-list 'vertico-multiform-categories
               '(jinx (vertico-grid-annotate . 25))))
#+end_src

* Key Bindings

#+begin_src emacs-lisp :tangle yes
(undefine-key! "C-z" "s-w" "s-+" "s--")
(setq doom-localleader-alt-key "C-z")

(map!
 ;; treemacs
 "s-1" #'treemacs
 "s-2" #'treemacs-tag-follow-mode
 "s-3" #'treemacs-project-follow-mode
 ;; navigation
 "C-x p" #'my-previous-window
 "C-x n" #'other-window
 "M-<left>" #'outline-hide-subtree
 "M-<right>" #'outline-show-children
 "M-<up>" #'outline-hide-other
 "M-<down>" #'outline-show-all
 "<home>" #'beginning-of-line
 "<end>" #'end-of-line
 "C-x r e" #'replace-regexp
 "C-x c p" #'my-match-paren
 "C-c x" #'dabbrev-expand
 "C-c b" #'revert-buffer
 "C-c u" #'upcase-region
 "C-c d" #'downcase-region
 "C-c f" #'find-file-at-point
 "C-c C-a" #'auto-fill-mode
 "C-c j" #'set-justification-left
 "M-g" #'goto-line
 "C-x C-y" #'my-save-and-killbuf
 ;; code navigation
 "s-." #'xref-find-definitions
 "s-," #'xref-go-back
 ;; buffers and font
 "<s-wheel-down>" #'enlarge-window-horizontally
 "<s-wheel-up>" #'shrink-window-horizontally
 "s-*" #'doom/increase-font-size
 "s-_" #'doom/decrease-font-size
 ;; gptel/elysium
 (:leader :prefix ("C-s" . "LLM")
          (:prefix ("e" . "elysium")
                   "e" #'elysium-query
                   "w" #'elysium-toggle-window
                   "a" #'elysium-apply-code-changes
                   "d" #'elysium-discard-all-suggested-changes)
          "w" #'gptel
          (:prefix ("a" . "add")
                   "r" #'gptel-add
                   "f" #'gptel-add-file))
 ;; lsp-bridge
 (:leader :prefix ("c" . "code")
          :desc "LSP Code actions"      "a"   #'lsp-bridge-code-action
          :desc "LSP Rename"            "r"   #'lsp-bridge-rename
          :desc "Find References"       "i"   #'lsp-bridge-find-references
          :desc "Find Definition"       "j"   #'lsp-bridge-find-def
          :desc "Find Implementation"   "J"   #'lsp-bridge-find-impl)
 ;; miscellaneous
 "M-s <up>" #'comint-previous-input
 "M-s <down>" #'comint-next-input
 "C-c w Q" #'my-quickload-session
 ;; mode specific
 :map (c++-mode-map c-mode-map cmake-mode-map)
 "C-c RET" #'recompile
 :map (c++-mode-map c-mode-map)
 "s-." #'lsp-bridge-peek
 "s-," #'lsp-bridge-peek-jump-back
 :map lsp-bridge-peek-keymap
 "s-." #'lsp-bridge-peek-jump
 "RET" #'lsp-bridge-peek-jump
 "<up>" #'lsp-bridge-peek-list-prev-line
 "<down>" #'lsp-bridge-peek-list-next-line
 :map gptel-mode-map
 "C-c RET" #'gptel-menu
 "C-<return>" #'gptel-send
 "C-<up>" #'gptel-beginning-of-response
 "C-<down>" #'gptel-end-of-response
 :map vterm-mode-map
 "C-c C-c" #'vterm-send-C-c
 :map mu4e-headers-mode-map
 "." #'mu4e-view-raw-message
 "<up>" #'mu4e-headers-prev
 "<down>" #'mu4e-headers-next
 "v" #'mu4e-views-mu4e-select-view-msg-method
 "M-n" #'mu4e-views-cursor-msg-view-window-down
 "M-p" #'mu4e-views-cursor-msg-view-window-up
 "f" #'mu4e-views-toggle-auto-view-selected-message
 "i" #'mu4e-views-mu4e-view-as-nonblocked-html
 :map org-msg-edit-mode-map
 "C-c C-c" #'my-org-msg-ctrl-c-ctrl-c
 )

(after! treemacs
  (treemacs-define-RET-action 'file-node-closed #'treemacs-visit-node-ace)
  (treemacs-define-RET-action 'file-node-open #'treemacs-visit-node-ace)
  (define-key treemacs-mode-map [s-mouse-1] #'treemacs-visit-node-ace))

;; Switch between header and implementation, replace projectile version as this one here works outside of projects
(add-hook 'c-initialization-hook
          (lambda () (define-key c-mode-base-map (kbd "C-c p a") 'ff-get-other-file)))

;; buffer selection cia <cmd>+<left click> in c++
(global-set-key [s-mouse-1] 'mouse-buffer-menu)

;; use more convinient smerge key bindings
(setq smerge-command-prefix "\C-cm")

; redo
(after! undo-fu
  (map! :map undo-fu-mode-map "C-?" #'undo-fu-only-redo))
#+end_src

* Email

I'm using mu4e and org-msg coming with doom. Unfortunately org-msg needs some fixing to work properly.

#+begin_src emacs-lisp :tangle yes
(use-package! mu4e
  ;; Fix the setup of org-msg for mu4e
  :init (add-hook 'org-msg-mode-hook
                  (lambda ()
                    (org-msg-mode-mu4e)
                    (org-msg-edit-mode-mu4e)
                    ;; this fixes the problem of not closing the edit buffer properly
                    (add-hook 'message-sent-hook
                              (lambda ()
                                (my-message-kill-buffer-no-query)
                                (mu4e-compose-post-restore-window-configuration)))))
  :config
  (setq mail-user-agent 'mu4e-user-agent ; important for org-msg
        mu4e-view-show-images t
        mu4e-compose-signature-auto-include nil
        mu4e-use-fancy-chars t
        mu4e-split-view 'vertical
        mu4e-headers-visible-columns 120

        ; send setup, see ~/.msmtprc
        sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")

        message-send-mail-function #'message-send-mail-with-sendmail

        ; receive setup, see ~/.mbsyncrc
        mu4e-get-mail-command "mbsync --config ~/.mbsyncrc e47"
        mu4e-update-interval 300
        mu4e-headers-auto-update t

        ; bookmarks
        mu4e-bookmarks '((:name "Unread"
                          :query "maildir:/INBOX AND flag:unread"
                          :key ?i
                          :favorite t))

        ; dirs
        mu4e-drafts-folder "/Drafts"
        mu4e-sent-folder "/Sent"
        mu4e-trash-folder "/Trash"
        mu4e-refile-folder "/Archive"
        mu4e-maildir-shortcuts '((:maildir "/INBOX" :key ?i)
                                 (:maildir "/Sent" :key ?s)
                                 (:maildir "/Drafts" :key ?d)
                                 (:maildir "/Trash" :key ?t)
                                 (:maildir "/Junk" :key ?j)
                                 (:maildir "/Spam" :key ?g :hide-unread t))

        ; avoid replying to ourselves
        mu4e-compose-reply-ignore-address '("no-?reply" "pohl@e47.org")))

(use-package! mu4e-views
  :defer nil
  :after mu4e
  :config
  (setq mu4e-views-default-view-method "html" ;; make xwidgets default
        ;; when pressing n and p stay in the current window
        mu4e-views-next-previous-message-behaviour 'stick-to-current-window
        ;; automatically open messages when moving in the headers view
        mu4e-views-auto-view-selected-message t)
  (mu4e-views-mu4e-use-view-msg-method "html")) ;; select the default
#+end_src

* Looks

** Theme

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-city-lights)
#+end_src

** Font

#+begin_src emacs-lisp :tangle yes
(defvar my-fixed-font "Iosevka Comfy")
(defvar my-variable-font "Roboto")

(setq doom-font
      (font-spec :family my-fixed-font :size 13)
      doom-variable-pitch-font
      (font-spec :family my-variable-font :size 13))

;; zoom in/out steps
(setq doom-font-increment 1)
#+end_src

** Line  numbers

#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Always fixed font even in variable-pitch-mode
(set-face-attribute 'line-number nil :font my-fixed-font)
(set-face-attribute 'line-number-current-line nil :font my-fixed-font)
#+end_src

** Titlebar

#+begin_src emacs-lisp :tangle yes
;; Set the project name as frame title (window name in macOS)
(setq frame-title-format '("" "%b" (:eval
                                    (let ((project-name (projectile-project-name)))
                                      (unless (string= "-" project-name)
                                        (format " in [%s]" project-name))))))

(add-hook 'doom-init-ui-hook
  (lambda ()
    ;; Enable/disable toolbar mode to set the proper (minimal) titlebar height (macOS)
    (tool-bar-mode 1)
    (tool-bar-mode 0)))
#+end_src

** Treemacs

#+begin_src emacs-lisp :tangle yes
(after! treemacs
  (setq treemacs-width 45)
  (treemacs-follow-mode 1)
  (treemacs-project-follow-mode 1)
  (set-face-attribute 'treemacs-root-face nil :height 1.0)
  ;; treemacs png/svg special icons don't look great, so we patch the icon set
  (add-hook 'treemacs-mode-hook 'my-update-treemacs-icons))
#+end_src

** Org

#+begin_src emacs-lisp :tangle yes
(after! org-mode
  (setq org-support-shift-select t
        org-replace-disputed-keys t))

(use-package! org-modern
  :after org
  :hook ((org-mode . global-org-modern-mode)
         (org-mode . (lambda ()
                       ;; increase line spacing a little
                       (setq-local default-text-properties '(line-spacing 0.1 line-height 1.1)))))
  :config
  (setq org-modern-star 'replace
        org-modern-label-border 0.3
        org-modern-replace-stars "●●●●●"
        org-modern-todo-faces (quote (("WAIT" :inherit org-modern-todo :height 1.2 :foreground "goldenrod")
                                      ("HOLD" :inherit org-modern-todo :height 1.2 :foreground "indian red")
                                      ("DONE" :inherit org-modern-todo :height 1.2 :inverse-video nil
                                       :foreground "white" :distant-foreground "white" :background "grey25"))))
  ;; Make the document title a bit bigger
  (set-face-attribute 'org-document-title nil :font my-variable-font :weight 'bold :height 1.3 :underline t)
  ;; Resize headings
  (dolist (face '((org-level-1 . 1.1)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font my-variable-font :height (cdr face))))

(after! org-modern-faces
  (set-face-attribute 'org-modern-symbol nil :family my-fixed-font))

(use-package! mixed-pitch
  :after org
  :hook (org-mode . mixed-pitch-mode))
#+end_src

** Tags

Not compatible with org-mode / org-modern.

#+begin_src emacs-lisp :tangle no
(use-package! svg-tag-mode
  :defer t
  :config
  (setq svg-tag-tags
      '(("TODO" . ((lambda (tag) (svg-tag-make "TODO"))))
        ("FIXME" . ((lambda (tag) (svg-tag-make "FIXME")))))
  ))
#+end_src

* Coding

** General coding settings

#+begin_src emacs-lisp :tangle yes
;; Snippets
(yas-global-mode 1)

;; Compilation buffer: stop at the first error and skip warnings
(setq compilation-scroll-output 'next-error
      compilation-skip-threshold 2)
#+end_src

Setup mappings to switch between C++ headers and implementation files.

#+begin_src emacs-lisp :tangle yes
(defvar my-cpp-other-file-alist
  '(("\\.cpp\\'" (".h" ".hpp" ".ipp"))
    ("\\.ipp\\'" (".hpp" ".cpp"))
    ("\\.hpp\\'" (".ipp" ".cpp"))
    ("\\.cxx\\'" (".hxx" ".ixx"))
    ("\\.ixx\\'" (".cxx" ".hxx"))
    ("\\.hxx\\'" (".ixx" ".cxx"))
    ("\\.cc\\'" (".h" ".hh"))
    ("\\.mm\\'" (".h"))
    ("\\.c\\'" (".h"))
    ("\\.h\\'" (".cpp" ".cc" ".cxx" ".c" ".mm"))))

(setq-default ff-other-file-alist 'my-cpp-other-file-alist)
#+end_src

Setup C++ custom indention via ~clang-format~.

#+begin_src emacs-lisp :tangle yes
(add-hook 'c-mode-common-hook 'my-clang-format-indent)
(add-hook 'c++-mode-hook 'my-clang-format-indent)
#+end_src

** Git

#+begin_src emacs-lisp :tangle yes
;; Make the git summary line longer
(after! magit
  (setq git-commit-summary-max-length 120))
#+end_src

** Code completion and linting

#+begin_src emacs-lisp :tangle yes
(use-package! lsp-bridge
  :config
  (setq lsp-bridge-enable-log nil
        lsp-bridge-enable-mode-line t
        lsp-bridge-enable-completion-in-string t
        lsp-bridge-enable-hover-diagnostic t
        lsp-bridge-enable-search-words nil
        acm-enable-tabnine t
        acm-backend-yas-candidate-min-length 2)
  (my-enable-global-lsp-bridge-mode))

;; Enable the lsp-bridge flymake backend
(use-package! flymake-bridge
  :after flymake
  :hook (lsp-bridge-mode-hook . flymake-bridge-setup))

;; Disable flymake for elisp
(add-hook 'emacs-lisp-mode-hook (lambda () (flymake-mode -1)))
#+end_src

** Debugging

FIXME: This does not work properly yet.

#+begin_src emacs-lisp :tangle no
(use-package! dap-mode
  :after lsp-mode
  :config

  (require 'dap-cpptools)
  (dap-cpptools-setup)

  ;(setq dap-lldb-debug-program '("/opt/homebrew/opt/llvm/bin/lldb-dap"))

  ;(dap-auto-configure-mode)
  ;; Enable dap-ui mode for a better experience
  ;(dap-ui-mode)
  ;(dap-ui-controls-mode 1)

  ;(require 'dap-codelldb)
  ;(dap-codelldb-setup)

  ;; Register a default debug template for C++ projects
  ;;(dap-register-debug-template
  ;;  "C++ LLDB::Run"
  ;;  (list :type "lldb"
  ;;        :request "launch"
  ;;        :name "C++ LLDB::Run"
  ;;        :program "${workspaceFolder}/"
  ;;        :cwd nil))
  (dap-register-debug-template
   "cpptools::Run Configuration MediaServer"
   (list :type "cppdbg"
         :request "launch"
         :name "cpptools::Run Configuration"
         :MIMode "gdb"
         :miDebuggerPath "/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-dap"
         :program "/Users/andreas/audio/syncdna-v1/mediaserver/build-dev/bin/sdna-mediaserver"
         :cwd "/Users/andreas/audio/syncdna-v1/mediaserver/build-dev/bin/"))
    )
#+end_src

** Mode mapping

#+begin_src emacs-lisp :tangle yes
(setq auto-mode-alist
      (append '(("\\.app$"                  . c++-mode)
                ("\\.bat$"                  . rexx-mode)        ; to edit batchfiles
                ("\\.bib$"                  . bibtex-mode)      ;
                ("\\.btm$"                  . rexx-mode)
                ("\\.C$"                    . c++-mode)
                ("\\.i$"                    . c++-mode)         ; SWIG: use c++-mode
                ("\\.cc$"                   . c++-mode)
                ("\\.cpp$"                  . c++-mode)
                ("\\.H$"                    . c++-mode)
                ("\\.h$"                    . c++-mode)
                ("\\.hi$"                   . c-mode)
                ("\\.hpp$"                  . c++-mode)
                ("\\.idl$"                  . c++-mode)
                ("\\.c$"                    . c-mode)           ; to edit C code
                ("\\.sqc$"                  . c-mode)           ; NON-Preprocessed C with DB/2 SQL
                ("\\.rc$"                   . c-mode)           ; Files from rc are also smth like c
                ("\\.rci$"                  . c-mode)           ; Files from rc are also smth like c
                ("\\.rcx$"                  . c-mode)           ; Files from rc are also smth like c
                ("\\.cmd$"                  . rexx-mode)        ; to edit REXX-Skripte
                ("\\.c?ps$"                 . postscript-mode)  ; Fuer postscript-files
                ("\\.tex$"                  . latex-mode)       ; tbd
                ("\\.sm$"                   . latex-mode)       ;
                ("\\.sty$"                  . latex-mode)       ;
                ("\\.mak$"                  . makefile-mode)
                ("makefile$"                . makefile-mode)
                ("\\.java$"                 . java-mode)
                ("\\.jav$"                  . java-mode)
                ("\\.py$"                   . python-mode)
                ("\\.xh$"                   . c++-mode)
                ("\\.xih$"                  . c++-mode)
                ("\\.in$"                   . m4-mode)
                ("\\.\\([pP][Llm]\\|al\\)$" . cperl-mode)
                ("\\.pod$"                  . cperl-mode)
                ("\\.puml$"                 . plantuml-mode)
                ("\\.ino$"                  . c++-mode)
                ("\\.ts$"                   . typescript-mode)
                ("\\.tsx$"                  . typescript-mode)
                ) auto-mode-alist))
#+end_src

** Tree-Sitter

Tree-sitter was not usable the last time I tried, so just disable it for now.

#+begin_src emacs-lisp :tangle yes
(add-to-list 'major-mode-remap-alist '(js-ts-mode . js-mode))
(add-to-list 'major-mode-remap-alist '(typescript-ts-mode . typescript-mode))
(add-to-list 'major-mode-remap-alist '(tsx-ts-mode . typescript-mode))
#+end_src

** Templates

TODO: This needs some checking. After some changes I did (or the emacs 29 upgrade) this seemed broken.

#+begin_src emacs-lisp :tangle yes
;; Set up default file templates based on the project
(set-file-template! "\\.hpp$" :trigger "__hpp" :mode 'c++-mode)
(set-file-template! "\\.cpp$" :trigger "__cpp" :mode 'c++-mode)
(set-file-template! "syncdna.*\\.hpp$" :trigger "sdna_hpp" :mode 'c++-mode)
(set-file-template! "syncdna.*\\.cpp$" :trigger "sdna_cpp" :mode 'c++-mode)
(set-file-template! "AudioGridder.*\\.hpp$" :trigger "ag_hpp" :mode 'c++-mode)
(set-file-template! "AudioGridder.*\\.cpp$" :trigger "ag_cpp" :mode 'c++-mode)
#+end_src

** Terminal

Enable/disable vterm-copy-mode automatically when scrolling up/down via mouse.

#+begin_src emacs-lisp :tangle yes
(advice-add 'mwheel-scroll :after #'my-scroll-mouse-handler)
#+end_src

** Compilation buffer

Automatically hide the compilation buffer when successful. Keep it open otherwise.

This is based on: https://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close

#+begin_src emacs-lisp :tangle yes
(defcustom auto-hide-compile-buffer-delay 1
    "Time in seconds before auto hiding compile buffer."
    :group 'compilation
    :type 'number)

(defun my-hide-compile-buffer-if-successful (buffer string)
  (setq compilation-total-time (time-subtract nil compilation-start-time))
  (setq time-str (concat " (Time: " (format-time-string "%s.%3N" compilation-total-time) "s)"))

  (if
      (with-current-buffer buffer
        (setq warnings (eval compilation-num-warnings-found))
        (setq warnings-str (concat " (Warnings: " (number-to-string warnings) ")"))
        (setq errors (eval compilation-num-errors-found))
        (setq errors-str (concat " (Errors: " (number-to-string errors) ")"))

        (if (and (eq errors 0) (string-prefix-p "finished" string)) nil t))

      ;; If errors or non-zero exit code
      (message (concat "Compiled with Errors" warnings-str errors-str time-str))

    ;; If compiled successfully or with warnings
    (progn
      (bury-buffer buffer)
      (run-with-timer auto-hide-compile-buffer-delay nil 'delete-window (get-buffer-window buffer 'visible))
      (message (concat "Compiled Successfully" warnings-str errors-str time-str)))))

(make-variable-buffer-local 'compilation-start-time)

(defun my-compilation-started (proc)
  (setq compilation-start-time (current-time)))

(add-hook 'compilation-start-hook 'my-compilation-started)
(add-hook 'compilation-finish-functions 'my-hide-compile-buffer-if-successful)
#+end_src

* AI Assistant (LLM)

** Elysium

Elysium is working similar to avante.nvim or cursor.ai or windsurf. Not as great yet, but usable. We are enabling smerge manually, as elysium does not do this properly.

#+begin_src emacs-lisp :tangle yes
(use-package! elysium
  :defer t
  :custom
  (elysium-window-size 0.45)
  (elysium-window-style 'vertical)
  ; enable smerge-mode explicitely
  :hook (elysium-apply-changes . smerge-start-session))
#+end_src

** Gptel

Gptel is the LLM main module also used by elysium. I'm mostly using claude by anthropic for coding, so we make it the default. All API keys got into =~/.gptel/=.

#+begin_src emacs-lisp :tangle yes
(use-package! gptel
  :defer t
  :custom
  (gptel-model 'claude-3-5-sonnet-20241022)
  :config
  (setq gptel-default-mode 'org-mode)

  ;; Integrations
  (defun read-file-contents (file-path)
    "Read the contents of FILE-PATH and return it as a string."
    (with-temp-buffer
      (insert-file-contents file-path)
      (buffer-string)))

  ;; OpenAI
  (setq! gptel-api-key (read-file-contents "~/.gptel/chatgpt.key"))

  ;; Google
  (defun gptel-gemini-api-key ()
    (read-file-contents "~/.gptel/gemini.key"))
  (gptel-make-gemini "Gemini" :stream t
                     :key #'gptel-gemini-api-key)

  ;; Anthropic (default)
  (defun gptel-claude-api-key ()
    (read-file-contents "~/.gptel/claude.key"))
  (setq gptel-backend
        (gptel-make-anthropic "Claude" :stream t
                              :key #'gptel-claude-api-key)))
#+end_src
