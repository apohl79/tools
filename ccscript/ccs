#!/usr/bin/perl

use strict;

my $CXX = "g++";
my $outf = "/tmp/script.temp.".(time).".cpp";
my $exec = "/tmp/script.exec.".(time);

my $template = "
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <iomanip>
#include <math.h>
#include <time.h>
#include <string.h>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>
//#include <ext/hash_map>
//#include <ext/hash_set>
#include <bitset>
//#include <pasync.h>
//#include <pinet.h>
//#include <glib.h>
//#include <glib/gunicode.h>

using namespace std;
using namespace __gnu_cxx;
//using namespace pt;

##func##

int main(int argc, char **argv) {
##code##
}
";

my $code;
my $func;
if( $ARGV[0] eq "-e" ) {
  $code = $ARGV[1];
  shift @ARGV;
  shift @ARGV;
} elsif( $ARGV[0] eq "-h" || !scalar(@ARGV) ) {
  print "Usage: [VALGRIND=1] [INSURE=1] [GDB=1] $0 {<scriptfile>|-e <code>|-h}\n";
  exit -1;
} else {
  open F, "<$ARGV[0]" or die "can't open $ARGV[0]: $!";
  my $switch = 0;
  while( <F> ) {
    if( /#func_start/ ) {
      $switch = 1;
    } elsif( /#func_end/ ) {
      $switch = 0;
    } else {
      if( $switch ) {
	$func .= $_;
      } else {
	$code .= $_;
      }
    }
  }
  shift @ARGV;
}
$template =~s /##func##/$func/;
$template =~s /##code##/$code/;

open( W, ">$outf" ) or die "Can't open $outf: $!";
print W $template;
close W;

#my $cmd = "g++ -ggdb -g -I/adtech/ptypes/include -c -o $exec.o $outf";
my $cmd = "$CXX -O3 -c -o $exec.o $outf";
system( $cmd ) == 0
  or die "compile command '$cmd' failed";
$cmd = "$CXX -ggdb -g -Wall $exec.o -lpthread -o $exec";
system( $cmd ) == 0
  or die "link command '$cmd' failed";

if( $ENV{VALGRIND} == 1 ) {
  system "valgrind --leak-check=full $exec ".join( " ", @ARGV );
} elsif( $ENV{GDB} == 1 ) {
  print "Source: $outf\n";
  system "gdb $exec ".join( " ", @ARGV );
} else {
  system "$exec ".join( " ", @ARGV );
}

unlink $exec;
unlink "$exec.o";
unlink $outf;
